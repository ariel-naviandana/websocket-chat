<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .message {
            font-size: 16px;
            margin-top: 10px;
            margin-bottom: 20px;
            position: relative;
            padding: 20px 10px 10px;
            border-radius: 10px;
            max-width: 60%;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
        }
        .message.right {
            text-align: right;
            background-color: #d1e7dd;
            margin-left: auto;
        }
        .message.left {
            text-align: left;
            background-color: #f8d7da;
            margin-right: auto;
        }
        .sender-id {
            font-weight: bold;
            font-size: 14px;
            position: absolute;
            top: 5px;
            left: 10px;
        }
        .message-time {
            font-size: 12px;
            text-align: right;
            margin-top: 5px;
            color: #888;
        }
        .message img {
            display: block;
            margin: 20px 0;
            max-width: 100%;
        }
        .message-text {
            margin-top: 10px;
        }
        .date-float {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            display: none;
        }
        .status {
            font-size: 12px;
            text-align: right;
            margin-top: 5px;
            color: #888;
        }
    </style>
</head>
<body>
<div class="container mt-4">
    <h1><%= title %></h1>
    <div id="joinContainer">
        <form id="loginForm">
            <input type="text" class="form-control mb-2" id="userId" placeholder="Enter your userId" required>
            <input type="submit" class="btn btn-success w-100" id="loginButton" value="Join Chat"/>
        </form>
    </div>
    <div id="chatContainer" style="display: none;">
        <div class="date-float" id="dateFloat"></div>
        <div id="messages" class="border p-4 mb-3" style="height: 300px; overflow-y: scroll;"></div>
        <div id="typing" class="text-muted mb-2" style="display: none;"></div>
        <form id="chatForm" enctype="multipart/form-data">
            <input type="text" class="form-control mb-2" id="message" placeholder="Type a message">
            <input type="file" class="form-control mb-2" id="image" accept="image/*">
            <input type="submit" class="btn btn-success w-100" value="Send" id="send"/>
        </form>
    </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io()
    const joinContainer = document.getElementById("joinContainer")
    const chatContainer = document.getElementById("chatContainer")
    const messages = document.getElementById("messages")
    const messageInput = document.getElementById("message")
    const imageInput = document.getElementById("image")
    const typingIndicator = document.getElementById("typing")
    const dateFloat = document.getElementById("dateFloat")
    let userId = null
    let isTyping = false
    let typingTimeout

    document.getElementById("loginForm").addEventListener("submit", async (e) => {
        e.preventDefault()
        userId = document.getElementById("userId").value
        chatContainer.style.display = "block"
        joinContainer.style.display = "none"
        messageInput.focus()

        const response = await fetch('/messages')
        const messageHistory = await response.json()
        messageHistory.forEach(msg => {
            addMessageToChat(msg, msg.senderId === userId ? 'right' : 'left')
        })
    })

    messageInput.addEventListener("input", () => {
        if (messageInput.value.trim() === "") {
            socket.emit("stopTyping", { senderId: userId })
            isTyping = false
        } else {
            if (!isTyping) {
                socket.emit("typing", { senderId: userId })
                isTyping = true
            }
            clearTimeout(typingTimeout)
            typingTimeout = setTimeout(() => {
                socket.emit("stopTyping", { senderId: userId })
                isTyping = false
            }, 3000)
        }
    })

    document.getElementById("chatForm").addEventListener("submit", (e) => {
        e.preventDefault()
        const messageText = messageInput.value
        const imageFile = imageInput.files[0]

        if (messageText || imageFile) {
            const data = new FormData()
            data.append('senderId', userId)
            data.append('text', messageText)
            if (imageFile) {
                data.append('image', imageFile)
            }

            fetch('/sendMessage', {
                method: 'POST',
                body: data
            }).then(response => response.json()).then(data => {
                socket.emit("message", data)
                addMessageToChat(data, "right")
                socket.emit("stopTyping", { senderId: userId })
                messageInput.value = ""
                imageInput.value = ""
                messageInput.focus()
                isTyping = false
            }).catch(error => {
                console.error('Error sending message:', error)
            })
        }
    })

    socket.on("typing", (data) => {
        typingIndicator.textContent = `${data.senderId} is typing...`
        typingIndicator.style.display = "block"
    })

    socket.on("stopTyping", () => {
        typingIndicator.textContent = ""
        typingIndicator.style.display = "none"
    })

    socket.on("message", (data) => {
        if (data.senderId !== userId) {
            addMessageToChat(data, "left")
        }
    })

    socket.on("statusUpdated", (data) => {
        const messageElement = document.getElementById(`message-${data.messageId}`)
        if (messageElement) {
            const statusElement = messageElement.querySelector('.status')
            statusElement.textContent = data.status
        }
    })

    function addMessageToChat(message, align) {
        const messageElement = document.createElement('div')
        messageElement.classList.add('message', align)
        messageElement.id = `message-${message.id}`

        const senderIdElement = document.createElement('div')
        senderIdElement.classList.add('sender-id')
        senderIdElement.textContent = message.senderId
        messageElement.appendChild(senderIdElement)

        if (message.imageUrl) {
            const imageElement = document.createElement('img')
            imageElement.src = message.imageUrl
            messageElement.appendChild(imageElement)
        }

        if (message.text) {
            const textElement = document.createElement('div')
            textElement.classList.add('message-text')
            textElement.textContent = message.text
            messageElement.appendChild(textElement)
        }

        const timeElement = document.createElement('div')
        timeElement.classList.add('message-time')
        const timestamp = new Date(message.createdAt)
        timeElement.textContent = timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        messageElement.appendChild(timeElement)

        const statusElement = document.createElement('div')
        statusElement.classList.add('status')
        statusElement.textContent = message.status
        messageElement.appendChild(statusElement)

        messages.appendChild(messageElement)
        messages.scrollTop = messages.scrollHeight
    }

    messages.addEventListener('scroll', () => {
        const messagesArray = Array.from(messages.children)
        for (let i = 0; i < messagesArray.length; i++) {
            const messageElement = messagesArray[i]
            const rect = messageElement.getBoundingClientRect()
            if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
                const messageTime = messageElement.querySelector('.message-time')
                const date = new Date(messageTime.textContent)
                if (!isNaN(date)) {
                    dateFloat.textContent = date.toLocaleDateString()
                    dateFloat.style.display = 'block'
                }
                break
            }
        }
    })
</script>
</body>
</html>